"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[625],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var o=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return n?o.createElement(g,i(i({ref:t},c),{},{components:n})):o.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7410:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>u,toc:()=>d});var o=n(8168),r=n(8587),a=(n(6540),n(5680));const i=["components"],s={id:"mutations",title:"Mutations",sidebar_label:"Mutations"},l=void 0,u={unversionedId:"mutations",id:"mutations",title:"Mutations",description:"Using React Hooks",source:"@site/docs/mutations.md",sourceDirName:".",slug:"/mutations",permalink:"/rescript-apollo-client/docs/mutations",draft:!1,editUrl:"https://github.com/jeddeloh/rescript-apollo-client/edit/master/documentationWebsite/docs/mutations.md",tags:[],version:"current",frontMatter:{id:"mutations",title:"Mutations",sidebar_label:"Mutations"},sidebar:"docs",previous:{title:"Queries",permalink:"/rescript-apollo-client/docs/queries"},next:{title:"Subscriptions",permalink:"/rescript-apollo-client/docs/subscriptions"}},c={},d=[{value:"Using React Hooks",id:"using-react-hooks",level:2},{value:"Basic usage",id:"basic-usage",level:3},{value:"Post-Mutation Updates",id:"post-mutation-updates",level:3},{value:"Directly Via the Apollo Client",id:"directly-via-the-apollo-client",level:2}],p={toc:d},m="wrapper";function g(e){let{components:t}=e,n=(0,r.A)(e,i);return(0,a.yg)(m,(0,o.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"using-react-hooks"},"Using React Hooks"),(0,a.yg)("h3",{id:"basic-usage"},"Basic usage"),(0,a.yg)("p",null,"Create a mutation module using ",(0,a.yg)("inlineCode",{parentName:"p"},"graphql-ppx"),". We'll use this throughout the examples on this page."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"module AddTodoMutation = %graphql(\n  `\n    mutation AddTodo($text: String!) {\n      todo: addTodoSimple(text: $text) {\n        id\n        completed\n        text\n      }\n    }\n  `\n)\n")),(0,a.yg)("p",null,"Call the ",(0,a.yg)("inlineCode",{parentName:"p"},"use")," hook in a component"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-reason"},'@react.component\nlet make = () => {\n  let (mutate, _mutationResult) = AddTodoMutation.use()\n\n  <button onClick={_ => mutate({text: "Some text"})->ignore}>\n    {"Add To-Do"->React.string}\n  </button>\n}\n')),(0,a.yg)("h3",{id:"post-mutation-updates"},"Post-Mutation Updates"),(0,a.yg)("p",null,"This section needs improvements, but for now here's an examples of refetching data after a mutation, updating the cache, and optimistic updates."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-reason"},'@react.component\nlet make = () => {\n  let (mutate, result) = AddTodoMutation.use()\n\n  switch result {\n  | {called: false} => <>\n      {"Not called... "->React.string}\n      <button\n        onClick={_ =>\n          mutate(\n            ~optimisticResponse=_variables => {\n              todo: {\n                __typename: "TodoItem",\n                id: "optimisticResponseTodo",\n                completed: None,\n                text: "To-Do from optimisticRespomse",\n              },\n            },\n            ~update=({writeFragment, writeQuery}, {data}) =>\n              switch data {\n              | Some({todo}) =>\n                // Apollo docs use cache.modify, but it\'s not typesafe. I recommend some\n                // combination of readQuery / writeQuery / writeFragment\n                Js.log2("mutate.update To-Do: ", todo)\n                let _unusedRef = writeFragment(\n                  ~fragment=module(Fragments.TodoItem),\n                  ~data={\n                    __typename: todo.__typename,\n                    id: "fragmentToDo",\n                    completed: None,\n                    text: "To-Do from writeFragment",\n                  },\n                  (),\n                )\n                let _unusedRef = writeQuery(\n                  ~query=module(TodosQuery),\n                  ~data={\n                    todos: [\n                      {\n                        __typename: todo.__typename,\n                        id: "writeQueryToDo",\n                        completed: None,\n                        text: "To-Do from writeQuery",\n                      },\n                    ],\n                  },\n                  (),\n                )\n              | None => ()\n              },\n            ~refetchQueries=[\n              TodosQuery.refetchQueryDescription(),\n              // - OR -\n              String("TodosQuery"),\n            ],\n            {text: "Another To-Do"},\n          )->ignore}>\n        {"Add To-Do (all the bells and whistles)"->React.string}\n      </button>\n    </>\n  | {loading: true} => "Loading..."->React.string\n  | {data: Some({todo: {text}}), error: None} =>\n    <p> {React.string("To-Do added: \\"" ++ (text ++ "\\""))} </p>\n  | {error} => <>\n      {"Error loading data"->React.string}\n      {switch error {\n      | Some(error) => React.string(": " ++ error.message)\n      | None => React.null\n      }}\n    </>\n  }\n}\n')),(0,a.yg)("h2",{id:"directly-via-the-apollo-client"},"Directly Via the Apollo Client"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-reason"},'let addTodo = _ =>\n  // This assumes you\'ve set up a Client module as in the Getting Started section\n  Apollo.client.mutate(~mutation=module(AddTodoMutation), {text: "Another To-Do"})\n  ->Promise.map(result =>\n    switch result {\n    | Ok({data}) => Js.log2("mutate result: ", data)\n    | Error(error) => Js.log2("Error: ", error)\n    }\n  )\n  ->ignore\n')))}g.isMDXComponent=!0}}]);