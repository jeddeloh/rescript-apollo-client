"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[219],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>y});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),g=o,y=d["".concat(s,".").concat(g)]||d[g]||p[g]||a;return n?r.createElement(y,i(i({ref:t},u),{},{components:n})):r.createElement(y,i({ref:t},u))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9074:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>y,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var r=n(8168),o=n(8587),a=(n(6540),n(5680));const i=["components"],l={id:"queries",title:"Queries",sidebar_label:"Queries"},s=void 0,c={unversionedId:"queries",id:"queries",title:"Queries",description:"Using React Hooks",source:"@site/docs/queries.md",sourceDirName:".",slug:"/queries",permalink:"/rescript-apollo-client/docs/queries",draft:!1,editUrl:"https://github.com/jeddeloh/rescript-apollo-client/edit/master/documentationWebsite/docs/queries.md",tags:[],version:"current",frontMatter:{id:"queries",title:"Queries",sidebar_label:"Queries"},sidebar:"docs",previous:{title:"Create a Client",permalink:"/rescript-apollo-client/docs/client-configuration"},next:{title:"Mutations",permalink:"/rescript-apollo-client/docs/mutations"}},u={},d=[{value:"Using React Hooks",id:"using-react-hooks",level:2},{value:"Basics",id:"basics",level:3},{value:"Typical Usage",id:"typical-usage",level:3},{value:"Lazy Fetching of Data",id:"lazy-fetching-of-data",level:3},{value:"Live Queries",id:"live-queries",level:3},{value:"Directly Via the Apollo Client",id:"directly-via-the-apollo-client",level:2}],p={toc:d},g="wrapper";function y(e){let{components:t}=e,n=(0,o.A)(e,i);return(0,a.yg)(g,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"using-react-hooks"},"Using React Hooks"),(0,a.yg)("p",null,"Queries work just like in JavaScript. You can declaratively fetch data using the ",(0,a.yg)("inlineCode",{parentName:"p"},"useQuery")," hook."),(0,a.yg)("h3",{id:"basics"},"Basics"),(0,a.yg)("p",null,"Create a query module with ",(0,a.yg)("inlineCode",{parentName:"p"},"graphql-ppx"),". We'll use this throughout the examples on this page."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-reason"},"module TodosQuery = %graphql(`\n  query TodosQuery {\n    todos: allTodos {\n      id\n      text\n      completed\n    }\n  }\n`)\n")),(0,a.yg)("p",null,"To execute the query, just call the ",(0,a.yg)("inlineCode",{parentName:"p"},"use")," hook in a component like so."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-reason"},'@react.component\nlet make = () =>\n  switch TodosQuery.use() {\n  | {loading: true} => "Loading..."->React.string\n  | {error: Some(_error)} => "Error loading data"->React.string\n  | {data: Some({todos})} =>\n    <div>\n      {"There are "->React.string} {todos->Belt.Array.length->React.int} {" To-Dos"->React.string}\n    </div>\n  | {data: None, error: None, loading: false} =>\n    "You might think this is impossible, but depending on the situation it might not be!"->React.string\n  }\n')),(0,a.yg)("h3",{id:"typical-usage"},"Typical Usage"),(0,a.yg)("p",null,"While we wish it was always as easy as above, there are many situations where you may be fetching new data while rendering a cached results, etc. Here's a slightly more complex example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-reason"},'@react.component\nlet make = () => {\n  let queryResult = TodosQuery.use()\n\n  <div>\n    {switch queryResult {\n    | {loading: true, data: None} => <p> {"Loading"->React.string} </p>\n    | {loading, data: Some({todos}), error, fetchMore} =>\n      <div>\n        <dialog>\n          {loading ? <p> {"Refreshing..."->React.string} </p> : React.null}\n          {switch error {\n          | Some(_) => <p> {"Something went wrong, data may be incomplete"->React.string} </p>\n          | None => React.null\n          }}\n        </dialog>\n        <p>\n          {React.string("There are " ++ (todos->Belt.Array.length->string_of_int ++ " To-Dos"))}\n        </p>\n        <p>\n          <button onClick={_ => fetchMore()->Utils.Promise.ignore}>\n            {"Fetch More!"->React.string}\n          </button>\n        </p>\n      </div>\n    | {loading: false, data: None} => <p> {"Error loading data"->React.string} </p>\n    }}\n  </div>\n}\n')),(0,a.yg)("h3",{id:"lazy-fetching-of-data"},"Lazy Fetching of Data"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-reason"},'@react.component\nlet make = () => {\n  let (executeQuery, queryResult) = TodosQuery.useLazy()\n  <div>\n    {switch queryResult {\n    | Unexecuted(_) => <>\n        {"Waiting to be executed... "->React.string}\n        <button onClick={_ => executeQuery()} value="execute"> {"Execute"->React.string} </button>\n      </>\n    | Executed({loading: true, data: None}) => <p> {"Loading"->React.string} </p>\n    | Executed({loading, data: Some({todos}), error}) => <>\n        <dialog>\n          {loading ? <p> {"Refreshing..."->React.string} </p> : React.null}\n          {switch error {\n          | Some(_) => <p> {"Something went wrong, data may be incomplete"->React.string} </p>\n          | None => React.null\n          }}\n        </dialog>\n        <p>\n          {React.string("There are " ++ (todos->Belt.Array.length->string_of_int ++ " To-Dos"))}\n        </p>\n      </>\n    | Executed({loading: false, data: None}) => <p> {"Error loading data"->React.string} </p>\n    }}\n  </div>\n}\n')),(0,a.yg)("h3",{id:"live-queries"},"Live Queries"),(0,a.yg)("p",null,"It's possible to update a query by attaching a subscription. Please see the subscriptions section on how to do this."),(0,a.yg)("h2",{id:"directly-via-the-apollo-client"},"Directly Via the Apollo Client"),(0,a.yg)("p",null,"There are many instances where you might want to query outside the context of React. You can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"query")," method directly on the client to do this."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-reason"},'let addTodo = _ =>\n  // This assumes you\'ve set up a Client module as in the Getting Started section\n  Apollo.client.mutate(~mutation=module(AddTodoMutation), {text: "Another To-Do"})\n  ->Promise.map(result =>\n    switch result {\n    | Ok({data}) => Js.log2("mutate result: ", data)\n    | Error(error) => Js.log2("Error: ", error)\n    },\n  )\n  ->ignore\n')),(0,a.yg)("p",null,"If you need to react to changes in some data in the cache, not just a one-off fetch, you can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"watchQuery")," method."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-reason"},'// This assumes you\'ve set up a Client module as in the Getting Started section\nlet observableQuery = Apollo.client.watchQuery(~query=module(TodosQuery), ())\n\nlet watchQuerySubscription = observableQuery.subscribe(~onNext=result =>\n  switch result {\n  | {data: Some({todos})} => Js.log2("watchQuery To-Dos: ", todos)\n  | _ => ()\n  }\n, ())\n\n// Unsubscribe like so:\n// watchQuerySubscription.unsubscribe();\n')))}y.isMDXComponent=!0}}]);